variables:
- group: "Build - Tokens"
- name: sonarToken
  value: $[variables.Sonar_Token]
- name: sonarUrl
  value: $[variables.Sonar_Url]  
- name:  ubuntu-Version
  value: $[variables.Ubuntu_Image_Version]
- name: serviceName
  value: "time-track-service"
- name: "performSonarScan"
  value: 0
- name: "azBuildCounter"
  value: $[counter('time-track-service', 1)]
- name: sonarProjectName
  value: "assurecare:time-track-service"

pool:
  name: "Azure Pipelines"
  vmImage: $(ubuntu-Version)

trigger:
  batch: true
  branches:
    include:
    - master
    - release/*
  paths:
    exclude:
    - test/*
pr:
  branches:
    include:
    - master
    - release/*

steps:
- pwsh: |
    $sonarToken = [System.Text.Encoding]::UTF8.GetBytes($env:SONARTOKEN + ":")
    $base64 = [System.Convert]::ToBase64String($sonarToken)
    $basicAuth = "Basic {0}" -f $base64
    $headers = @{ Authorization = $basicAuth }
    $url = $env:SONAR_URL -f $env:PAT, $env:SONARPROJECT 
    Invoke-RestMethod -Method Post -Uri $url -Headers $headers
    
  displayName: 'Set Sonar Personal Access Token'
  env:
    PAT: $(System.AccessToken)
    SONARPROJECT: $(sonarProjectName)
    SONARTOKEN: $(sonarToken)
    SONAR_URL: $(sonarUrl)

- task: DownloadBuildArtifacts@0
  displayName: 'Download Kubernetes Tooling'
  inputs:
    buildType: specific
    project: 'd6c4b858-0f5e-4b69-a346-a92c0ef3cd07'
    pipeline: 247
    artifactName: 'kubernetes-deployment'

- task: Bash@3
  displayName: 'Extract Version Information from cluster-info.json'
  inputs:
    targetType: filePath
    filePath: '$(System.ArtifactsDirectory)/kubernetes-deployment/scripts/extract-cluster-info.sh'
    arguments: '$(Build.SourcesDirectory)/cluster-info.json'

- task: Bash@3
  displayName: 'Run Tests'
  inputs:
    targetType: filePath
    filePath: 'run-tests.sh'
    arguments: 'azure $(azBuildCounter) $(Build.ArtifactStagingDirectory) $(System.AccessToken)'

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/*.xml'
  inputs:
    testResultsFormat: xUnit
    testResultsFiles: '**/*.xml'
    searchFolder: '$(Build.ArtifactStagingDirectory)'
    failTaskOnFailedTests: true
    
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: echo "##vso[task.setvariable variable=performSonarScan]1"
    failOnStderr: true
  displayName: 'Perform Sonar Scan Check'
  condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))

# Publish code coverage results to DevOps
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: '$(Build.ArtifactStagingDirectory)/testresults/coverage.cobertura.xml'

- task: Bash@3
  displayName: 'Parse PR Branch Info'
  inputs:
    targetType: 'filePath'
    filePath: './parse-pr-branch-info.sh'
    arguments: $(Build.Reason) $(System.PullRequest.PullRequestId) $(System.PullRequest.SourceBranch)

- task: Docker@0
  displayName: 'Build a container image'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryConnection: 'AssureCare Docker Repository'
    dockerFile: '$(serviceName)/Dockerfile'
    buildArguments: |
     APP_VERSION=$(app_version)
     APP_BUILD=$(azBuildCounter)
     PERFORM_SONARSCAN=$(performSonarScan)
     SONAR_TOKEN=$(sonarToken)
     PR_NUMBER=$(PR_NUMBER)
     PR_BRANCH=$(PR_BRANCH)
     PAT=$(System.AccessToken)
     
    defaultContext: false
    imageName: 'assurecare/$(serviceName):$(app_version)'
    includeLatestTag: true

- task: Bash@3
  displayName: 'Add Azure Container Tag'
  inputs:
    targetType: 'inline'
    script: docker tag $SRC $TARGET && docker tag $TARGET $LATESTTARGET && docker images && echo "Tagged!"
  env:
    SRC: assurecare/$(serviceName):$(app_version)
    TARGET: regmchubaks01.azurecr.io/assurecare/$(serviceName):$(app_version)
    LATESTTARGET: regmchubaks01.azurecr.io/assurecare/$(serviceName):latest 
    
- task: Docker@0
  displayName: 'Push a container image'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryConnection: 'AssureCare Docker Repository'
    action: 'Push an image'
    imageName: 'assurecare/$(serviceName):$(app_version)'
    includeLatestTag: true
  condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  
- task: Docker@0
  displayName: 'Push Azure container image'
  inputs:
    azureSubscription: 'AKS Service Connection'
    azureContainerRegistry: '{"loginServer":"regmchubaks01.azurecr.io", "id" : "/subscriptions/3962b9d1-47b9-4c24-93d8-fb572c366b77/resourceGroups/rg-mc-hub-ss-01/providers/Microsoft.ContainerRegistry/registries/regmchubaks01"}'
    action: 'Push an image'
    imageName: 'assurecare/$(serviceName):$(app_version)'
    includeLatestTag: true
  condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
